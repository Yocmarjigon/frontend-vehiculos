import { ChangeDetectorRef, ElementRef, TemplateRef } from '@angular/core';
import { ValidationErrors } from '@angular/forms';
import * as i0 from "@angular/core";
export declare type ErrorComponentTemplate = TemplateRef<{
    $implicit: ValidationErrors;
    text: string;
}>;
export interface ControlErrorComponent {
    customClass: string | string[];
    text: string | null;
    createTemplate?(tpl: ErrorComponentTemplate, error: ValidationErrors, text: string): void;
}
export declare class DefaultControlErrorComponent implements ControlErrorComponent {
    private cdr;
    private host;
    errorText: string | null;
    errorTemplate: ErrorComponentTemplate | undefined;
    errorContext: {
        $implicit: ValidationErrors;
        text: string;
    };
    hideError: boolean;
    private _addClasses;
    createTemplate(tpl: ErrorComponentTemplate, error: ValidationErrors, text: string): void;
    set customClass(classes: string | string[]);
    set text(value: string | null);
    constructor(cdr: ChangeDetectorRef, host: ElementRef<HTMLElement>);
    static ɵfac: i0.ɵɵFactoryDeclaration<DefaultControlErrorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DefaultControlErrorComponent, "control-error", never, {}, {}, never, never, true, never>;
}
