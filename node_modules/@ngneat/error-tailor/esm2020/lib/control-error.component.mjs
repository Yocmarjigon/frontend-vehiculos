import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class DefaultControlErrorComponent {
    constructor(cdr, host) {
        this.cdr = cdr;
        this.host = host;
        this.errorText = null;
        this.hideError = true;
        this._addClasses = [];
    }
    createTemplate(tpl, error, text) {
        this.errorTemplate = tpl;
        this.errorContext = { $implicit: error, text };
        this.cdr.markForCheck();
    }
    set customClass(classes) {
        if (!this.hideError) {
            this._addClasses = Array.isArray(classes) ? classes : classes.split(/\s/);
            this.host.nativeElement.classList.add(...this._addClasses);
        }
    }
    set text(value) {
        if (value !== this.errorText) {
            this.errorText = value;
            this.hideError = !value;
            if (this.hideError) {
                this.host.nativeElement.classList.remove(...this._addClasses);
            }
            this.cdr.markForCheck();
        }
    }
}
DefaultControlErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: DefaultControlErrorComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
DefaultControlErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: DefaultControlErrorComponent, isStandalone: true, selector: "control-error", ngImport: i0, template: `
    <label class="control-error" [class.hide-control]="hideError" *ngIf="!errorTemplate">{{ errorText }}</label>
    <ng-template *ngTemplateOutlet="errorTemplate; context: errorContext"></ng-template>
  `, isInline: true, styles: [".hide-control{display:none!important}:host{display:block}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: DefaultControlErrorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'control-error', standalone: true, imports: [CommonModule], template: `
    <label class="control-error" [class.hide-control]="hideError" *ngIf="!errorTemplate">{{ errorText }}</label>
    <ng-template *ngTemplateOutlet="errorTemplate; context: errorContext"></ng-template>
  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".hide-control{display:none!important}:host{display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1lcnJvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvZXJyb3ItdGFpbG9yL3NyYy9saWIvY29udHJvbC1lcnJvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx1QkFBdUIsRUFBcUIsU0FBUyxFQUEyQixNQUFNLGVBQWUsQ0FBQzs7O0FBZ0MvRyxNQUFNLE9BQU8sNEJBQTRCO0lBZ0N2QyxZQUFvQixHQUFzQixFQUFVLElBQTZCO1FBQTdELFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBeUI7UUEvQmpGLGNBQVMsR0FBa0IsSUFBSSxDQUFDO1FBR2hDLGNBQVMsR0FBRyxJQUFJLENBQUM7UUFFVCxnQkFBVyxHQUFhLEVBQUUsQ0FBQztJQTBCaUQsQ0FBQztJQXhCckYsY0FBYyxDQUFDLEdBQTJCLEVBQUUsS0FBdUIsRUFBRSxJQUFZO1FBQy9FLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksV0FBVyxDQUFDLE9BQTBCO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDNUQ7SUFDSCxDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsS0FBb0I7UUFDM0IsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3hCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUMvRDtZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDOzt5SEE5QlUsNEJBQTRCOzZHQUE1Qiw0QkFBNEIseUVBakI3Qjs7O0dBR1Qsb0lBSlMsWUFBWTsyRkFrQlgsNEJBQTRCO2tCQXJCeEMsU0FBUzsrQkFDRSxlQUFlLGNBQ2IsSUFBSSxXQUNQLENBQUMsWUFBWSxDQUFDLFlBQ2I7OztHQUdULG1CQUNnQix1QkFBdUIsQ0FBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuZXhwb3J0IHR5cGUgRXJyb3JDb21wb25lbnRUZW1wbGF0ZSA9IFRlbXBsYXRlUmVmPHsgJGltcGxpY2l0OiBWYWxpZGF0aW9uRXJyb3JzOyB0ZXh0OiBzdHJpbmcgfT47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJvbEVycm9yQ29tcG9uZW50IHtcbiAgY3VzdG9tQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdO1xuICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xuICBjcmVhdGVUZW1wbGF0ZT8odHBsOiBFcnJvckNvbXBvbmVudFRlbXBsYXRlLCBlcnJvcjogVmFsaWRhdGlvbkVycm9ycywgdGV4dDogc3RyaW5nKTogdm9pZDtcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY29udHJvbC1lcnJvcicsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtZXJyb3JcIiBbY2xhc3MuaGlkZS1jb250cm9sXT1cImhpZGVFcnJvclwiICpuZ0lmPVwiIWVycm9yVGVtcGxhdGVcIj57eyBlcnJvclRleHQgfX08L2xhYmVsPlxuICAgIDxuZy10ZW1wbGF0ZSAqbmdUZW1wbGF0ZU91dGxldD1cImVycm9yVGVtcGxhdGU7IGNvbnRleHQ6IGVycm9yQ29udGV4dFwiPjwvbmctdGVtcGxhdGU+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZXM6IFtcbiAgICBgXG4gICAgICAuaGlkZS1jb250cm9sIHtcbiAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgfVxuXG4gICAgICA6aG9zdCB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgfVxuICAgIGBcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29udHJvbEVycm9yQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbEVycm9yQ29tcG9uZW50IHtcbiAgZXJyb3JUZXh0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgZXJyb3JUZW1wbGF0ZTogRXJyb3JDb21wb25lbnRUZW1wbGF0ZSB8IHVuZGVmaW5lZDtcbiAgZXJyb3JDb250ZXh0OiB7ICRpbXBsaWNpdDogVmFsaWRhdGlvbkVycm9yczsgdGV4dDogc3RyaW5nIH07XG4gIGhpZGVFcnJvciA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfYWRkQ2xhc3Nlczogc3RyaW5nW10gPSBbXTtcblxuICBjcmVhdGVUZW1wbGF0ZSh0cGw6IEVycm9yQ29tcG9uZW50VGVtcGxhdGUsIGVycm9yOiBWYWxpZGF0aW9uRXJyb3JzLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLmVycm9yVGVtcGxhdGUgPSB0cGw7XG4gICAgdGhpcy5lcnJvckNvbnRleHQgPSB7ICRpbXBsaWNpdDogZXJyb3IsIHRleHQgfTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHNldCBjdXN0b21DbGFzcyhjbGFzc2VzOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGlmICghdGhpcy5oaWRlRXJyb3IpIHtcbiAgICAgIHRoaXMuX2FkZENsYXNzZXMgPSBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoL1xccy8pO1xuICAgICAgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi50aGlzLl9hZGRDbGFzc2VzKTtcbiAgICB9XG4gIH1cblxuICBzZXQgdGV4dCh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5lcnJvclRleHQpIHtcbiAgICAgIHRoaXMuZXJyb3JUZXh0ID0gdmFsdWU7XG4gICAgICB0aGlzLmhpZGVFcnJvciA9ICF2YWx1ZTtcbiAgICAgIGlmICh0aGlzLmhpZGVFcnJvcikge1xuICAgICAgICB0aGlzLmhvc3QubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKC4uLnRoaXMuX2FkZENsYXNzZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGhvc3Q6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxufVxuIl19