import { Directive, Inject, Input, Optional, Self } from '@angular/core';
import { EMPTY, fromEvent, merge, NEVER, Subject } from 'rxjs';
import { distinctUntilChanged, mapTo, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { DefaultControlErrorComponent } from './control-error.component';
import { ErrorTailorConfigProvider, FORM_ERRORS } from './providers';
import * as i0 from "@angular/core";
import * as i1 from "./control-error-anchor.directive";
import * as i2 from "./form-action.directive";
import * as i3 from "@angular/forms";
export class ControlErrorsDirective {
    constructor(vcr, host, config, globalErrors, controlErrorAnchorParent, form, ngControl, controlContainer) {
        this.vcr = vcr;
        this.host = host;
        this.config = config;
        this.globalErrors = globalErrors;
        this.controlErrorAnchorParent = controlErrorAnchorParent;
        this.form = form;
        this.ngControl = ngControl;
        this.controlContainer = controlContainer;
        this.customErrors = {};
        this.destroy = new Subject();
        this.showError$ = new Subject();
        this.mergedConfig = {};
        this.submit$ = this.form ? this.form.submit$ : EMPTY;
        this.reset$ = this.form ? this.form.reset$ : EMPTY;
    }
    ngOnInit() {
        this.mergedConfig = this.buildConfig();
        this.anchor = this.resolveAnchor();
        this.control = (this.controlContainer || this.ngControl).control;
        const hasAsyncValidator = !!this.control.asyncValidator;
        const statusChanges$ = this.control.statusChanges.pipe(distinctUntilChanged());
        const valueChanges$ = this.control.valueChanges;
        const controlChanges$ = merge(statusChanges$, valueChanges$);
        let changesOnAsync$ = EMPTY;
        let changesOnBlur$ = EMPTY;
        let changesOnChange$ = EMPTY;
        if (!this.controlErrorsClass || this.controlErrorsClass?.length === 0) {
            if (this.mergedConfig.controlErrorsClass && this.mergedConfig.controlErrorsClass) {
                this.controlErrorsClass = this.mergedConfig.controlErrorsClass;
            }
        }
        if (!this.controlCustomClass || this.controlCustomClass?.length === 0) {
            if (this.mergedConfig.controlCustomClass && this.mergedConfig.controlCustomClass) {
                this.controlCustomClass = this.mergedConfig.controlCustomClass;
            }
        }
        if (this.mergedConfig.controlErrorsOn.async && hasAsyncValidator) {
            // hasAsyncThenUponStatusChange
            changesOnAsync$ = statusChanges$;
        }
        if (this.isInput && this.mergedConfig.controlErrorsOn.change) {
            // on each change
            changesOnChange$ = valueChanges$;
        }
        if (this.isInput && this.mergedConfig.controlErrorsOn.blur) {
            const blur$ = fromEvent(this.host.nativeElement, 'focusout');
            // blurFirstThenUponChange
            changesOnBlur$ = blur$.pipe(switchMap(() => valueChanges$.pipe(startWith(true))));
        }
        const submit$ = merge(this.submit$.pipe(mapTo(true)), this.reset$.pipe(mapTo(false)));
        // when submitted, submitFirstThenUponChanges
        const changesOnSubmit$ = submit$.pipe(switchMap(submit => (submit ? controlChanges$.pipe(startWith(true)) : NEVER)));
        // on reset, clear ComponentRef and customAnchorDestroyFn
        this.reset$.pipe(takeUntil(this.destroy)).subscribe(() => this.clearRefs());
        merge(changesOnAsync$, changesOnBlur$, changesOnChange$, changesOnSubmit$, this.showError$)
            .pipe(takeUntil(this.destroy))
            .subscribe(() => this.valueChanges());
    }
    setError(text, error) {
        if (!this.ref) {
            this.ref = this.anchor.createComponent(this.mergedConfig.controlErrorComponent);
        }
        const instance = this.ref.instance;
        if (this.controlErrorsTpl) {
            instance.createTemplate(this.controlErrorsTpl, error, text);
        }
        else {
            instance.text = text;
        }
        if (this.controlErrorsClass) {
            instance.customClass = this.controlErrorsClass;
        }
        if (!this.controlErrorAnchor && this.mergedConfig.controlErrorComponentAnchorFn) {
            this.customAnchorDestroyFn = this.mergedConfig.controlErrorComponentAnchorFn(this.host.nativeElement, this.ref.hostView.rootNodes[0]);
        }
    }
    /**
     * Explicit showing of a control error via some custom application code.
     */
    showError() {
        this.showError$.next();
    }
    /**
     * Explicit hiding of a control error via some custom application code.
     */
    hideError() {
        this.setError(null);
    }
    ngOnDestroy() {
        this.destroy.next();
        this.clearRefs();
    }
    get isInput() {
        return this.mergedConfig.blurPredicate(this.host.nativeElement);
    }
    clearRefs() {
        if (this.customAnchorDestroyFn) {
            this.customAnchorDestroyFn();
            this.customAnchorDestroyFn = null;
        }
        if (this.ref) {
            this.ref.destroy();
        }
        this.ref = null;
    }
    valueChanges() {
        const controlErrors = this.control.errors;
        const classesAdd = Array.isArray(this.controlCustomClass)
            ? this.controlCustomClass
            : this.controlCustomClass?.split(/\s/) ?? [];
        if (controlErrors) {
            const [firstKey] = Object.keys(controlErrors);
            const getError = this.customErrors[firstKey] || this.globalErrors[firstKey];
            if (!getError) {
                return;
            }
            const text = typeof getError === 'function' ? getError(controlErrors[firstKey]) : getError;
            if (this.isInput) {
                this.host.nativeElement.parentElement.classList.add('error-tailor-has-error');
                if (this.controlCustomClass) {
                    this.host.nativeElement.classList.add(...classesAdd);
                }
            }
            this.setError(text, controlErrors);
        }
        else if (this.ref) {
            if (this.isInput) {
                this.host.nativeElement.parentElement.classList.remove('error-tailor-has-error');
                if (this.controlCustomClass) {
                    this.host.nativeElement.classList.remove(...classesAdd);
                }
            }
            this.setError(null);
        }
    }
    resolveAnchor() {
        if (this.controlErrorAnchor) {
            return this.controlErrorAnchor.vcr;
        }
        if (this.controlErrorAnchorParent) {
            return this.controlErrorAnchorParent.vcr;
        }
        return this.vcr;
    }
    buildConfig() {
        return {
            ...{
                blurPredicate(element) {
                    return element.tagName === 'INPUT' || element.tagName === 'SELECT';
                },
                controlErrorComponent: DefaultControlErrorComponent
            },
            ...this.config,
            controlErrorsOn: {
                async: this.controlErrorsOnAsync ?? this.config.controlErrorsOn?.async ?? true,
                blur: this.controlErrorsOnBlur ?? this.config.controlErrorsOn?.blur ?? true,
                change: this.controlErrorsOnChange ?? this.config.controlErrorsOn?.change ?? false
            }
        };
    }
}
ControlErrorsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: ControlErrorsDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: ErrorTailorConfigProvider }, { token: FORM_ERRORS }, { token: i1.ControlErrorAnchorDirective, optional: true }, { token: i2.FormActionDirective, optional: true }, { token: i3.NgControl, optional: true, self: true }, { token: i3.ControlContainer, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
ControlErrorsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.1", type: ControlErrorsDirective, isStandalone: true, selector: "[formControlName]:not([controlErrorsIgnore]), [formControl]:not([controlErrorsIgnore]), [formGroup]:not([controlErrorsIgnore]), [formGroupName]:not([controlErrorsIgnore]), [formArrayName]:not([controlErrorsIgnore]), [ngModel]:not([controlErrorsIgnore])", inputs: { customErrors: ["controlErrors", "customErrors"], controlErrorsClass: "controlErrorsClass", controlCustomClass: "controlCustomClass", controlErrorsTpl: "controlErrorsTpl", controlErrorsOnAsync: "controlErrorsOnAsync", controlErrorsOnBlur: "controlErrorsOnBlur", controlErrorsOnChange: "controlErrorsOnChange", controlErrorAnchor: "controlErrorAnchor" }, exportAs: ["errorTailor"], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: ControlErrorsDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[formControlName]:not([controlErrorsIgnore]), [formControl]:not([controlErrorsIgnore]), [formGroup]:not([controlErrorsIgnore]), [formGroupName]:not([controlErrorsIgnore]), [formArrayName]:not([controlErrorsIgnore]), [ngModel]:not([controlErrorsIgnore])',
                    exportAs: 'errorTailor'
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [ErrorTailorConfigProvider]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [FORM_ERRORS]
                }] }, { type: i1.ControlErrorAnchorDirective, decorators: [{
                    type: Optional
                }] }, { type: i2.FormActionDirective, decorators: [{
                    type: Optional
                }] }, { type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i3.ControlContainer, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { customErrors: [{
                type: Input,
                args: ['controlErrors']
            }], controlErrorsClass: [{
                type: Input
            }], controlCustomClass: [{
                type: Input
            }], controlErrorsTpl: [{
                type: Input
            }], controlErrorsOnAsync: [{
                type: Input
            }], controlErrorsOnBlur: [{
                type: Input
            }], controlErrorsOnChange: [{
                type: Input
            }], controlErrorAnchor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,