import { NgModule } from '@angular/core';
import { ControlErrorAnchorDirective } from './control-error-anchor.directive';
import { DefaultControlErrorComponent } from './control-error.component';
import { ControlErrorsDirective } from './control-error.directive';
import { FormActionDirective } from './form-action.directive';
import { ErrorTailorConfigProvider, FORM_ERRORS } from './providers';
import * as i0 from "@angular/core";
const _errorTailorImports = [
    ControlErrorsDirective,
    ControlErrorAnchorDirective,
    DefaultControlErrorComponent,
    FormActionDirective
];
export class errorTailorImports {
}
errorTailorImports.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: errorTailorImports, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
errorTailorImports.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: errorTailorImports, imports: [ControlErrorsDirective,
        ControlErrorAnchorDirective,
        DefaultControlErrorComponent,
        FormActionDirective], exports: [ControlErrorsDirective,
        ControlErrorAnchorDirective,
        DefaultControlErrorComponent,
        FormActionDirective] });
errorTailorImports.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: errorTailorImports, imports: [DefaultControlErrorComponent] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: errorTailorImports, decorators: [{
            type: NgModule,
            args: [{
                    imports: [_errorTailorImports],
                    exports: [_errorTailorImports]
                }]
        }] });
export function provideErrorTailorConfig(config) {
    return [
        {
            provide: ErrorTailorConfigProvider,
            useValue: config
        },
        {
            provide: FORM_ERRORS,
            ...config.errors
        }
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItdGFpbG9yLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9lcnJvci10YWlsb3Ivc3JjL2xpYi9lcnJvci10YWlsb3IucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFxQix5QkFBeUIsRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7O0FBRXhGLE1BQU0sbUJBQW1CLEdBQUc7SUFDMUIsc0JBQXNCO0lBQ3RCLDJCQUEyQjtJQUMzQiw0QkFBNEI7SUFDNUIsbUJBQW1CO0NBQ3BCLENBQUM7QUFNRixNQUFNLE9BQU8sa0JBQWtCOzsrR0FBbEIsa0JBQWtCO2dIQUFsQixrQkFBa0IsWUFWN0Isc0JBQXNCO1FBQ3RCLDJCQUEyQjtRQUMzQiw0QkFBNEI7UUFDNUIsbUJBQW1CLGFBSG5CLHNCQUFzQjtRQUN0QiwyQkFBMkI7UUFDM0IsNEJBQTRCO1FBQzVCLG1CQUFtQjtnSEFPUixrQkFBa0IsWUFSN0IsNEJBQTRCOzJGQVFqQixrQkFBa0I7a0JBSjlCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQzlCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDO2lCQUMvQjs7QUFHRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsTUFBeUI7SUFDaEUsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLHlCQUF5QjtZQUNsQyxRQUFRLEVBQUUsTUFBTTtTQUNqQjtRQUNEO1lBQ0UsT0FBTyxFQUFFLFdBQVc7WUFDcEIsR0FBRyxNQUFNLENBQUMsTUFBTTtTQUNqQjtLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xFcnJvckFuY2hvckRpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbC1lcnJvci1hbmNob3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IERlZmF1bHRDb250cm9sRXJyb3JDb21wb25lbnQgfSBmcm9tICcuL2NvbnRyb2wtZXJyb3IuY29tcG9uZW50JztcbmltcG9ydCB7IENvbnRyb2xFcnJvcnNEaXJlY3RpdmUgfSBmcm9tICcuL2NvbnRyb2wtZXJyb3IuZGlyZWN0aXZlJztcbmltcG9ydCB7IEZvcm1BY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL2Zvcm0tYWN0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFcnJvclRhaWxvckNvbmZpZywgRXJyb3JUYWlsb3JDb25maWdQcm92aWRlciwgRk9STV9FUlJPUlMgfSBmcm9tICcuL3Byb3ZpZGVycyc7XG5cbmNvbnN0IF9lcnJvclRhaWxvckltcG9ydHMgPSBbXG4gIENvbnRyb2xFcnJvcnNEaXJlY3RpdmUsXG4gIENvbnRyb2xFcnJvckFuY2hvckRpcmVjdGl2ZSxcbiAgRGVmYXVsdENvbnRyb2xFcnJvckNvbXBvbmVudCxcbiAgRm9ybUFjdGlvbkRpcmVjdGl2ZVxuXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW19lcnJvclRhaWxvckltcG9ydHNdLFxuICBleHBvcnRzOiBbX2Vycm9yVGFpbG9ySW1wb3J0c11cbn0pXG5leHBvcnQgY2xhc3MgZXJyb3JUYWlsb3JJbXBvcnRzIHt9XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRXJyb3JUYWlsb3JDb25maWcoY29uZmlnOiBFcnJvclRhaWxvckNvbmZpZykge1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEVycm9yVGFpbG9yQ29uZmlnUHJvdmlkZXIsXG4gICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBGT1JNX0VSUk9SUyxcbiAgICAgIC4uLmNvbmZpZy5lcnJvcnNcbiAgICB9XG4gIF07XG59XG4iXX0=